# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'oscilloscope.ui'
#
# Created by: PyQt5 UI code generator 5.15.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import cv2
from PyQt5.QtGui import QImage, QPixmap
from scipy.io import loadmat
import numpy as np


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(649, 480)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(10, 50, 630, 400))
        self.label.setObjectName("label")
        self.label.setStyleSheet('background-color: rgb(0, 0, 0)')
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(10, 10, 93, 28))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.open)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(110, 10, 93, 28))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_2.clicked.connect(self.shut_down)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(550, 10, 93, 28))
        self.pushButton_3.setObjectName("pushButton_3")
        self.pushButton_3.clicked.connect(self.load_can)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setGeometry(QtCore.QRect(450, 10, 93, 28))
        self.pushButton_4.setObjectName("pushButton_4")
        self.pushButton_4.clicked.connect(self.load_sin)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 649, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "示波器"))
        self.setWindowTitle('模拟示波器 v1.0')
        self.pushButton.setText(_translate("MainWindow", "开启"))
        self.pushButton_2.setText(_translate("MainWindow", "关闭"))
        self.pushButton_3.setText(_translate("MainWindow", "串口输入"))
        self.pushButton_4.setText(_translate("MainWindow", "模拟正弦波"))

    def open(self):
        self.src = cv2.imread("F:\\projects\\oscilloscope\\bg.png")
        self.src_resize = cv2.resize(self.src, (630, 400))
        self.image_height, self.image_width, self.image_depth = self.src_resize.shape  # 读取图像高宽深度
        QIm = cv2.cvtColor(self.src_resize, cv2.COLOR_BGR2RGB)
        QIm = QImage(QIm.data, self.image_width, self.image_height, self.image_width * self.image_depth,
                     QImage.Format_RGB888)
        self.label.setPixmap(QPixmap.fromImage(QIm))

    def shut_down(self):
        self.bg = cv2.imread("F:\\projects\\oscilloscope\\black.png")
        self.bg_resize = cv2.resize(self.bg, (630, 400))
        self.image_height, self.image_width, self.image_depth = self.bg_resize.shape  # 读取图像高宽深度
        QIm = cv2.cvtColor(self.bg_resize, cv2.COLOR_BGR2RGB)
        QIm = QImage(QIm.data, self.image_width, self.image_height, self.image_width * self.image_depth,
                     QImage.Format_RGB888)
        self.label.setPixmap(QPixmap.fromImage(QIm))

    def load_sin(self):
        self.src = cv2.imread("F:\\projects\\oscilloscope\\bg.png")
        self.src_resize = cv2.resize(self.src, (630, 400))
        m = loadmat('F:\\projects\\oscilloscope\\sin_data.mat')
        for i in range(400):
            x = int(i * 1.575)
            y = int(m["ans"][0][i] * 200)
            if y>=0:
                y=200-y
            else:
                y=-y+200
            cv2.circle(self.src_resize, (x, y), 1, (0, 0, 255))
            QIm = cv2.cvtColor(self.src_resize, cv2.COLOR_BGR2RGB)
            QIm = QImage(QIm.data, self.image_width, self.image_height, self.image_width * self.image_depth,
                         QImage.Format_RGB888)
            self.label.setPixmap(QPixmap.fromImage(QIm))
            cv2.waitKey(30)
    def load_can(self):
        self.src = cv2.imread("F:\\projects\\oscilloscope\\bg.png")
        self.src_resize = cv2.resize(self.src, (630, 400))
        data=np.loadtxt("./data.txt", usecols=0, dtype=float)
        for i in range(len(data)):
            x = int(i)
            y = int(data[i] * 60)
            if y > 0:
                y = 200 - y
            elif y==0:
                y = y + 200
            cv2.circle(self.src_resize, (x, y), 1, (0, 0, 255))
            QIm = cv2.cvtColor(self.src_resize, cv2.COLOR_BGR2RGB)
            QIm = QImage(QIm.data, self.image_width, self.image_height, self.image_width * self.image_depth,
                         QImage.Format_RGB888)
            self.label.setPixmap(QPixmap.fromImage(QIm))
            cv2.waitKey(30)